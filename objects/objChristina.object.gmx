<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprChristinaDown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>64</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
image_speed = 0
scrAssignSprites("Christina")
playable = true

xspeed = 0
yspeed = 0

item = 0 //0 = shield, 1 = bow, 2 = bombs
for (k = 0; k &lt; 3; k ++)
itemAvail[k] = global.item[k]

swording = false
shielding = false
dir = 270
slidetime = 0

knock = false
hurt = false
hurttime = 0

atk = 2 + global.item[3] * 5

espresso = global.item[4]
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUGGING

hp = 3 + global.item[5]
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mapping

if playable
if !objGlobal.pause and !objGlobal.transition
{
if place_meeting(x+xspeed,y,objSolid)
{
for (k = abs(xspeed); k &gt; 0; k --)
if !place_meeting(x+k*sign(xspeed),y,objSolid)
{
x += k * sign(xspeed)
break;
}
xspeed = 0
}
else
x += xspeed

if place_meeting(x,y+yspeed,objSolid)
{
for (k = abs(yspeed); k &gt; 0; k --)
if !place_meeting(x,y+k*sign(yspeed),objSolid)
{
y += k * sign(yspeed)
break;
}
yspeed = 0
}
else
y += yspeed
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if playable
if !knock and !objGlobal.pause and !objGlobal.transition
{
if sprite_index = sprChar or sprite_index = sprCharDown or sprite_index = sprCharUp
{
if global.Right &gt; global.Left
{
if yspeed = 0
{
xspeed = 2
sprite_index = sprChar
dir = 0
image_xscale = 1
}
}
else if global.Left &gt; global.Right
{
if yspeed = 0
{
xspeed = -2
sprite_index = sprChar
dir = 180
image_xscale = -1
}
}
else
{
xspeed = 0
}

if global.Up &gt; global.Down
{
if xspeed = 0
{
sprite_index = sprCharUp
dir = 90
yspeed = -2
}
}
else if global.Down &gt; global.Up
{
if xspeed = 0
{
sprite_index = sprCharDown
dir = 270
yspeed = 2
}
}
else
yspeed = 0

if itemAvail[item] and global.Cpress
{
if item = 0
{
if sprite_index = sprCharDown
sprite_index = sprCharShieldDown
else if sprite_index = sprCharUp
sprite_index = sprCharShieldUp
else
sprite_index = sprCharShield

shielding = true
xspeed = 0
yspeed = 0
}
else if item = 1 and espresso &gt;= 1
{
if sprite_index = sprCharDown
sprite_index = sprCharUseDown
else if sprite_index = sprCharUp
sprite_index = sprCharUseUp
else
sprite_index = sprCharUse

var arrow = instance_create(x,y,objArrow);
arrow.image_angle = dir
arrow.sprite_index = sprCharArrow
with arrow
{
xspeed = dcos(image_angle) * 4
yspeed = dsin(image_angle) * -4
}
slidetime = 8
xspeed = 0
yspeed = 0
espresso --
}
else if item = 2 and espresso &gt;= 7
{
if sprite_index = sprCharDown
sprite_index = sprCharUseDown
else if sprite_index = sprCharUp
sprite_index = sprCharUseUp
else
sprite_index = sprCharUse

var bomb = instance_create(x+dcos(dir)*16,y-dsin(dir)*16,objBomb);
bomb.sprite_index = sprCharBomb

slidetime = 8
xspeed = 0
yspeed = 0
espresso -= 7
}
}
else
if global.Xpress
{
var sword = instance_create(x,y,objSword);

if sprite_index = sprCharDown
{
sprite_index = sprCharUseDown
sword.image_angle = 180 + image_xscale * 90
sword.dir = 270
}
else if sprite_index = sprCharUp
{
sprite_index = sprCharUseUp
sword.image_angle = 180 - image_xscale * 90
sword.dir = 90
}
else
{
sprite_index = sprCharUse
sword.image_angle = 0
sword.dir = 90 - image_xscale * 90
}
sword.image_xscale = image_xscale
swording = true
xspeed = 0
yspeed = 0

with sword
{
var dx = dcos(image_angle), dy = dsin(image_angle);

x += dx * 4 * image_xscale
y += dy * -4 * image_xscale

xspeed = dx * 4 * image_xscale
yspeed = dy * -4 * image_xscale
}
}

if xspeed = 0 and yspeed = 0
{
image_speed = 0
image_index = 0
}
else
image_speed = 0.08
}
else
if shielding
{
if global.Up &gt; global.Down
{
sprite_index = sprCharShieldUp
dir = 90
}
else if global.Up &lt; global.Down
{
sprite_index = sprCharShieldDown
dir = 270
}
else
if global.Right != global.Left
{
sprite_index = sprCharShield
image_xscale = global.Right - global.Left
dir = 90 - image_xscale * 90
}

if !global.C
{
if sprite_index = sprCharShieldUp
sprite_index = sprCharUp
else if sprite_index = sprCharShieldDown
sprite_index = sprCharDown
else
sprite_index = sprChar

shielding = false
}
}
else
if swording
{
if !instance_exists(objSword)
{
swording = false
if sprite_index = sprCharUseUp
sprite_index = sprCharUp
else if sprite_index = sprCharUseDown
sprite_index = sprCharDown
else
sprite_index = sprChar
}
}
else
if slidetime &gt; 0
{
slidetime --
if slidetime = 0
{
if sprite_index = sprCharUseUp
sprite_index = sprCharUp
else if sprite_index = sprCharUseDown
sprite_index = sprCharDown
else
sprite_index = sprChar
}
}
}

while dir &gt; 360
dir -= 360
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Misc

if global.Backpress and !shielding
{
item ++
if item = 3
item = 0
}

if keyboard_check_pressed(ord('3'))
item = 2
if keyboard_check_pressed(ord('2'))
item = 1
if keyboard_check_pressed(ord('1'))
item = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if place_meeting(x,y,objSmallPickup)
{
var pickup = instance_place(x,y,objSmallPickup).id

if pickup.image_index = 0
espresso ++
else
{
hp ++
if hp &gt; global.item[5] + 3
hp = global.item[5] + 3
}

with pickup instance_destroy()
}

if !objGlobal.pause and !objGlobal.transition
{
if hurttime &gt; 0
{
hurttime --

if hurttime &gt; 120
{
if place_meeting(x+xspeed,y,objSolid)
xspeed = 0
}
else
{
visible = !visible
if hurttime = 120
{
xspeed = 0
knock = false
}
else if hurttime = 0
{
hurt = false
visible = true
}
}
}
else
if hurttime = 0
{
if place_meeting(x,y,objLucas)
{
var luke = instance_place(x,y,objLucas).id;
//if shielding

if !luke.knock
{
hurt = true
knock = true
hp --
swording = false
shielding = false

if x &gt; luke.x
image_xscale = -1
else
image_xscale = 1

xspeed = image_xscale * -4

sprite_index = sprChar
dir = 90 - image_xscale * 90
hurttime = 131
}
}
else if place_meeting(x,y,objMayo)
{
var mayo = instance_place(x,y,objMayo);

hurt = true
knock = true
hp --
swording = false
shielding = false

xspeed = mayo.xspeed
yspeed = mayo.yspeed
sprite_index = sprCharDown
dir = 270

hurttime = 131

with mayo instance_destroy()
}
}

if shielding
{
var prevx = x, prevy = y;

image_xscale *= 1.25
image_yscale *= 1.25

x += dcos(dir) * 4
y += dsin(dir) * -4

if place_meeting(x,y,objLucas)
{
var luke = instance_place(x,y,objLucas)

if !luke.knock
if (luke.xspeed &gt; 0 and image_xscale = -1.25)
    or (luke.xspeed &lt; 0 and image_xscale = 1.25)
{
with luke
{
xspeed *= -1
image_xscale *= -1
step = 120
}
}
}
if place_meeting(x,y,objMayo)
{
var mayo = instance_place(x,y,objMayo);

with mayo instance_destroy()
}

image_xscale = sign(image_xscale)
image_yscale = sign(image_yscale)
x = prevx
y = prevy
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
